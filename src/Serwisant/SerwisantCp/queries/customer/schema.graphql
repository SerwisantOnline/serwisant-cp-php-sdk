# This file was generated. Do not edit manually.

schema {
    query: CustomerQuery
    mutation: CustomerMutation
}

type AcceptOrRejectRepairResult {
    errors: [Error!]
    success: Boolean!
}

type Address {
    ID: HashID!
    building: String!
    city: String!
    countryIso: String!
    postalCode: String!
    street: String!
    type: AddressType!
}

type CustomField {
    ID: HashID!
    concern: Dictionary
    description: String
    form: CustomFieldForm!
    name: String!
    required: Boolean!
    selectOptions: [String!]
    type: CustomFieldType!
}

type CustomFieldValue {
    "Primary key of particular field value to be used for update. NULL value means it's a field created after this entity creation."
    ID: HashID
    "Entity of field definition."
    field: CustomField!
    "Value of field for this particular object - it's always a string here - look into `field` definition to get proper casting."
    value: String
}

type Customer {
    ID: HashID!
    address: Address
    addresses: [Address!]!
    "Customer agreements, including any new agreement customer should take (this is complete agreements list)"
    agreements: [CustomerAgreementValue!]!
    avatar: File
    companyName: String
    "Will return a list of values for custom fields"
    customFields: [CustomFieldValue!]!
    displayName: String
    email: String
    internetAccess: Boolean!
    isAnonymous: Boolean!
    person: String
    phone: Phone
    serviceSupplier: ServiceSupplier!
    taxId: String
    taxPrefix: TaxPrefix
    "Time zone of customer, all times wisible for customer should be represented in this time zone"
    timeZone: String!
    type: CustomerType!
}

type CustomerAgreement {
    ID: HashID!
    content: String
    description: String!
    "Agreement is required to create Customer, but only if corresponding do CustomerType visibility flag is enabled"
    required: Boolean!
    title: String!
    type: CustomerAgreementType!
    visibleBusiness: Boolean!
    visiblePersonal: Boolean!
}

type CustomerAgreementValue {
    "Primary key to be used to update agreement decision. NULL means this is a new created agreement and customer has no opportunity to make decision."
    ID: HashID
    "True mean customer accepted agreement"
    accepted: Boolean!
    "Entity of CustomerAgreement with all agreement details"
    agreement: CustomerAgreement!
}

type CustomerMutation {
    acceptOrRejectRepair(
        "Decision about a repair proposition. If any offers present, REJECT decision will reject all offers"
        decision: AcceptOrRejectRepairDecision!,
        "If offer ID passed (see RepairOffer entity), decision is made against particular offer"
        offer: HashID,
        repair: HashID!
    ): AcceptOrRejectRepairResult
    "Use this mutation to register a new device. Because we don't want trust customer's data created device will be marked as not-verified."
    createDevice(address: AddressInput, device: DeviceInput!): DeviceCreationResult
    createMessage(message: MessageInput!): MessageCreationResult
    createMessageReply(content: String, message: HashID!): MessageReplyCreationResult
    "Create new repair as customer. Field `temporaryFiles` takes IDs of temporary files create via `createTemporaryFile `. Temporary files will be attached to repair and persisted."
    createRepair(additionalItems: [RepairItemInput!], device: HashID, options: RepairCreationOptions, repair: RepairInput!, temporaryFiles: [HashID!]): RepairCreationResult
    "Create a temporary file - file can be attached to created repair and will be persisted. It's useful to scenarios, where files must be uploaded before creation of eg. repair - and persisted with repair."
    createTemporaryFile(file: FileInput!): TemporaryFileCreationResult
    createTicket(devices: [HashID!], options: TicketCreationOptions, temporaryFiles: [HashID!], ticket: TicketInput!): TicketCreationResult
    markMessageRead(message: HashID!): Boolean
    print(ID: HashID!, type: PrintType!): TemporaryFileCreationResult
    setRating(rating: RatingInput!, subject: HashID!, subjectType: RatingSubjectType!): RatingResult
    updateViewer(addresses: [AddressUpdateInput!], agreements: [CustomerAgreementUpdateInput!], customer: CustomerUpdateInput): ViewerUpdateResult
    updateViewerPassword(currentPassword: String!, password: String!, passwordConfirmation: String!): ViewerPasswordUpdateResult
}

type CustomerQuery {
    autocomplete(query: String!, scope: AutocompleteScope!): [String!]!
    customFields(form: CustomFieldForm!): [CustomField!]!
    devices(filter: DevicesFilter = {type: ALL}, limit: Int = 20, page: Int = 1, sort: DevicesSort = ID): DevicesResult!
    dictionaryEntries(filter: DictionaryEntriesFilter): [Dictionary!]!
    messages(filter: MessagesFilter = {type: ALL}, limit: Int = 20, page: Int = 1, sort: MessagesSort): MessagesResult!
    priorities(filter: PrioritiesFilter): [Priority!]!
    repairs(filter: RepairsFilter = {type: OPEN}, limit: Int = 20, page: Int = 1, sort: RepairsSort): RepairsResult!
    scheduleDates(filter: ScheduleDatesFilter!): [ScheduleDate!]!
    "Return details of temporary files identified by ID passed in arguments."
    temporaryFiles(ID: [HashID!]!): [TemporaryFile!]!
    tickets(filter: TicketsFilter = {type: OPEN}, limit: Int = 20, page: Int = 1, sort: TicketsSort = ID): TicketsResult!
    viewer: Viewer!
}

type Device {
    ID: HashID!
    additionalItems: [DeviceItem!]!
    address: Address
    copyOfSaleDocument: File
    "Will return a list of values for custom fields"
    customFields: [CustomFieldValue!]!
    displayName: String!
    files: [File!]!
    isVerified: Boolean!
    model: String
    number: String!
    serial: String
    serviceSupplier: ServiceSupplier!
    type: Dictionary!
    vendor: String
}

type DeviceCreationResult {
    device: Device
    errors: [Error!]
}

type DeviceItem {
    description: String
    serial: String
    type: Dictionary!
}

type DevicesResult {
    items: [Device!]!
    pages: Int!
}

type Dictionary {
    ID: HashID!
    auxiliaryId: String
    name: String!
    type: DictionaryType!
}

type Employee {
    displayName: String!
    serviceSupplier: ServiceSupplier!
}

"Error from mutation"
type Error {
    argument: String!
    code: String!
    message: String!
}

type File {
    contentType: String!
    image: Boolean!
    publicRemarks: String
    url(size: ImageSize = ORIGINAL): String
}

type Message {
    ID: HashID!
    content: String!
    createdAt: DateTime!
    sender: MessageSender!
    thread: MessageThread!
}

type MessageCreationResult {
    errors: [Error!]
    message: Message
}

type MessageRecipient {
    displayName: String!
    type: MessageRecipientType!
}

type MessageReplyCreationResult {
    errors: [Error!]
    message: Message
}

type MessageSender {
    displayName: String!
    type: MessageSenderType!
}

type MessageThread {
    ID: HashID!
    allMessages: Int!
    createdAt: DateTime!
    lastMessageAt: DateTime!
    messages: [Message!]!
    recipients: [MessageRecipient!]!
    subject: String
    unreadMessages: Int!
}

type MessagesResult {
    items: [MessageThread!]!
    pages: Int!
}

type Parcel {
    courierName: String
    deliverTo: ParcelEdge!
    "This is a status obtained from external courier service and represent a parcel delivery state."
    deliveryStatus: ParcelDeliveryStatus!
    pickupFrom: ParcelEdge!
    "Internal parcel's state."
    status: ParcelStatus!
    "Parcel's number ad courier tracking service. In general tracking services age public available and number can be used to get current delivery status. Please note: delivery status is tracked, so more-less it should match a `deliveryStatus` field."
    trackingNumber: String
}

type ParcelEdge {
    company: String
    name: String
}

type Phone {
    "Country prefix, eg. +48"
    countryPrefix: String
    formatted: String
    isGsm: Boolean!
    "Number without country prefix - domestic number"
    number: String
}

type Priority {
    ID: HashID!
    color: String
    name: String!
    sla: Int
    type: PriorityType!
}

type Rating {
    comment: String
    date: Date!
    stars: Int!
}

type RatingResult {
    errors: [Error!]
}

type Repair {
    ID: HashID!
    additionalItems: [RepairItem!]!
    advanceAmount: Decimal!
    "Address where service should pick up a repair item. Empty if `collectionType` type is `PERSONAL`"
    collectionAddress: Address
    "Defines how repair item will be collected from customer."
    collectionType: RepairTransportType!
    costs: RepairCosts!
    "Will return a list of values for custom fields"
    customFields: [CustomFieldValue!]!
    "Address where repaired item should be returned. Empty if `deliveryType` type is `PERSONAL`"
    deliveryAddress: Address
    "Defines how repaired item should be returned to customer."
    deliveryType: RepairTransportType!
    device: Device
    diagnosis: RepairDiagnosis
    displayName: String!
    "Files attached to repair. For :service schema it includes private and public files, for otcher schemas only public files are included"
    files: [File!]!
    isRateable: Boolean!
    issue: String
    model: String
    offers: [RepairOffer!]
    parcels: [Parcel!]
    priceEstimated: Decimal
    priceEstimatedTaxRate: Decimal
    rating: Rating
    rma: String!
    secretToken: SecretToken!
    serial: String
    "Service supplier who is currently processing this repair"
    serviceSupplier: ServiceSupplier!
    status: RepairStatus!
    summary: RepairSummary
    type: Dictionary!
    vendor: String
    warranty: Boolean!
    warrantyPurchaseDate: Date
    warrantyPurchaseDocument: String
}

type RepairCosts {
    estimatedGross: Decimal
    """

    Net price given in repair diagnosis, this is a price customer must confirm. If null, diagnosis wan't performed,
    no price given durring diagnosis or sepatate offers for this repair exists - see offer field
    """
    estimatedNet: Decimal
    finalGross: Decimal
    "Net price to be paid for repair"
    finalNet: Decimal
    "Full price (incl. tax) to be paid for whole service, decucted by advance, incremented by other possibe costs like shipping, etc."
    payment: Decimal
    proposedGross: Decimal
    "Net price proposed durring repair aquisition, nil if nothing was proposed, it's not a real price, rather a guess"
    proposedNet: Decimal
}

type RepairCreationResult {
    errors: [Error!]
    repair: Repair
}

type RepairDiagnosis {
    publicRemarks: String
}

type RepairItem {
    description: String
    serial: String
    type: Dictionary!
}

type RepairOffer {
    ID: HashID!
    "This field can be null - that means no desision was made - true or false means yes or no"
    accepted: Boolean
    description: String
    items: [RepairOfferItem!]!
    number: String!
    priceGross: Decimal!
    "Summary net price for this offer. If offered repair was diagnosed, diagnosis price is included here."
    priceNet: Decimal!
    title: String!
}

type RepairOfferItem {
    description: String!
    priceGross: Decimal!
    priceNet: Decimal!
    type: RepairOfferItemType!
    vat: Decimal!
}

type RepairStatus {
    canceledOrRejected: Boolean!
    confirmed: Boolean!
    "Repair creation date - first apear in database"
    createdAt: DateTime!
    "Business days passed from startedAt date"
    daysFromStart: Int!
    "Business days to end of repair"
    daysToEnd: Int!
    diagnosed: Boolean!
    displayName: String!
    "This is estimated end date - this date is set by service once repair is created. It can differ from real `finishedAt`"
    finishDateEstimated: Date
    finished: Boolean!
    "Real date of repair finish. Finish mean transition into WAITING_FOR_COLLECTION or PASSED_FOR_RETURN state."
    finishedAt: Date
    progress: Float!
    requireCustomerAccept: Boolean!
    "Date when repair was started. For repair delivered by parcel or created via customer panel this will be set once repair will be delivered to service and its status will be set to WAITING_FOR_DIAGNOSIS"
    startedAt: Date
    status: RepairState!
    summedUp: Boolean!
    timeProgress: Float!
    timeStatus: OrderTimeStatus!
    "Date when repair was touched last time - repair update, status update, new diagnosis, repair acton will update this date"
    updatedAt: DateTime!
}

type RepairSummary {
    publicRemarks: String
}

type RepairsResult {
    items: [Repair!]!
    pages: Int!
}

type Schedule {
    concern: ScheduleConcern!
    customer: Customer
    description: String
    device: Device
    title: String!
}

type ScheduleDate {
    date: Date!
    schedule: Schedule!
    ticket: Ticket
}

type SecretToken {
    subjectType: SecretTokenSubject!
    token: String!
}

type ServiceSupplier {
    "Main address"
    address: Address
    "All given addresses, including a main one"
    addresses: [Address!]!
    avatar: File
    displayName: String!
    email: String
    phone: Phone
    type: ServiceSupplierType!
}

type TemporaryFile {
    ID: HashID!
    contentType: String!
    name: String!
    url(size: ImageSize = ORIGINAL): String
}

type TemporaryFileCreationResult {
    errors: [Error!]
    temporaryFile: TemporaryFile
}

type Ticket {
    ID: HashID!
    actions: [TicketAction!]!
    address: Address
    addressRemarks: String
    "Will return a list of values for custom fields"
    customFields: [CustomFieldValue!]!
    devices: [Device!]!
    employee: Employee
    files: [File!]!
    isRateable: Boolean!
    issue: String!
    number: String!
    payment: TicketPayment!
    priority: Priority!
    rating: Rating
    status: TicketStatus!
    type: Dictionary
}

type TicketAction {
    hoursSpend: Decimal
    performedAt: DateTime!
    remarks: String
}

type TicketCreationResult {
    errors: [Error!]
    ticket: Ticket
}

type TicketPayment {
    amountGross: Decimal
    amountNet: Decimal
    hoursSpend: Decimal
    paid: Boolean!
    paymentGross: Decimal
    paymentNet: Decimal
    type: TicketPaymentType
}

type TicketStatus {
    createdAt: DateTime!
    "Human readeable status"
    displayName: String!
    "Real finish time, remarks are the same as for `started_on`"
    finishedAt: DateTime
    scheduledOn: DateTime
    scheduledTo: DateTime
    "Real start time based on status change - please note: if ticket status will not be updated or it will be updated post-factum date may be inaccurate"
    startedOn: DateTime
    "Ticket status as enum, use it to comparisons or other logic"
    status: TicketState!
}

type TicketsResult {
    items: [Ticket!]!
    pages: Int!
}

type Viewer {
    "Current customer"
    customer: Customer!
    "Service supplier dedicated for handling all repairs - it can be differ from main service supplier"
    repairsServiceSupplier: ServiceSupplier
    "Service supplier dedicated for handling ticketing - it can be differ from main service supplier"
    ticketsServiceSupplier: ServiceSupplier
}

type ViewerPasswordUpdateResult {
    errors: [Error!]
}

type ViewerUpdateResult {
    errors: [Error!]
    viewer: Viewer
}

enum AcceptOrRejectRepairDecision {
    ACCEPT
    REJECT
}

enum AddressType {
    BILLING
    BUSINESS
    HOME
    OTHER
}

enum AutocompleteScope {
    MODEL
    VENDOR
}

enum CountryCode {
    AD
    AE
    AF
    AG
    AI
    AL
    AM
    AO
    AQ
    AR
    AS
    AT
    AU
    AW
    AX
    AZ
    BA
    BB
    BD
    BE
    BF
    BG
    BH
    BI
    BJ
    BL
    BM
    BN
    BO
    BQ
    BR
    BS
    BT
    BV
    BW
    BY
    BZ
    CA
    CC
    CD
    CF
    CG
    CH
    CI
    CK
    CL
    CM
    CN
    CO
    CR
    CU
    CV
    CW
    CX
    CY
    CZ
    DE
    DJ
    DK
    DM
    DO
    DZ
    EC
    EE
    EG
    EH
    ER
    ES
    ET
    FI
    FJ
    FK
    FM
    FO
    FR
    GA
    GB
    GD
    GE
    GF
    GG
    GH
    GI
    GL
    GM
    GN
    GP
    GQ
    GR
    GS
    GT
    GU
    GW
    GY
    HK
    HM
    HN
    HR
    HT
    HU
    ID
    IE
    IL
    IM
    IN
    IO
    IQ
    IR
    IS
    IT
    JE
    JM
    JO
    JP
    KE
    KG
    KH
    KI
    KM
    KN
    KP
    KR
    KW
    KY
    KZ
    LA
    LB
    LC
    LI
    LK
    LR
    LS
    LT
    LU
    LV
    LY
    MA
    MC
    MD
    ME
    MF
    MG
    MH
    MK
    ML
    MM
    MN
    MO
    MP
    MQ
    MR
    MS
    MT
    MU
    MV
    MW
    MX
    MY
    MZ
    NA
    NC
    NE
    NF
    NG
    NI
    NL
    NO
    NP
    NR
    NU
    NZ
    OM
    PA
    PE
    PF
    PG
    PH
    PK
    PL
    PM
    PN
    PR
    PS
    PT
    PW
    PY
    QA
    RE
    RO
    RS
    RU
    RW
    SA
    SB
    SC
    SD
    SE
    SG
    SH
    SI
    SJ
    SK
    SL
    SM
    SN
    SO
    SR
    SS
    ST
    SV
    SX
    SY
    SZ
    TC
    TD
    TF
    TG
    TH
    TJ
    TK
    TL
    TM
    TN
    TO
    TR
    TT
    TV
    TW
    TZ
    UA
    UG
    UM
    US
    UY
    UZ
    VA
    VC
    VE
    VG
    VI
    VN
    VU
    WF
    WS
    YE
    YT
    ZA
    ZM
    ZW
}

enum CustomFieldForm {
    CUSTOMER
    DEVICE
    REPAIR
    TICKET
}

enum CustomFieldType {
    "Option"
    CHECKBOX
    "Date picker"
    DATE
    "Password (will be encrypted)"
    PASSWORD
    "Single choice list"
    SELECT
    "Single line text"
    TEXT
    "Multi line text"
    TEXTAREA
}

enum CustomerAgreementType {
    CUSTOM_1
    CUSTOM_2
    CUSTOM_3
    CUSTOM_4
    DATA_PROCESSING
    MARKETING_DATA_PROCESSING
    REFUND_POLICY
    RULES
}

enum CustomerType {
    "Company"
    BUSINESS
    "Person"
    PERSONAL
}

enum DevicesFilterType {
    ALL
    ID
}

enum DevicesSort {
    ID
}

enum DictionaryType {
    "Type of component from inventory"
    COMPONENT_TYPE
    "Group od customers"
    CUSTOMER_GROUP
    "Repaired equipment types"
    REPAIR_SUBJECT_TYPE
    "Category of ticket"
    TICKET_CATEGORY
}

enum ImageSize {
    ORIGINAL
    THUMBNAIL
}

enum MessageRecipientType {
    CUSTOMER
    EMPLOYEE
    SERVICE_SUPPLIER
}

enum MessageSenderType {
    CUSTOMER
    EMPLOYEE
    SERVICE_SUPPLIER
}

enum MessagesFilterType {
    ALL
    ARCHIVED
    ID
}

enum MessagesSort {
    DATE_UPDATED
}

enum OrderTimeStatus {
    "Out of time"
    DELAYED
    "Inside agreed timespan"
    OK
    "Approaching to timespan border"
    WARNING
}

enum ParcelDeliveryStatus {
    CANCELED
    COLLECTED
    DELIVERED
    DELIVERY
    NOT_COLLECTED
    NOT_DELIVERED
    NOT_ORDERED
    ORDERED
    RETURNED
    TRANSIT
}

enum ParcelStatus {
    CLOSED
    FAILED
    NEW
    READY_FOR_SUBMISSION
    SUBMITTED
}

enum PrintType {
    PARCEL
    REPAIR_INTRO
    REPAIR_SUMMARY
    TICKET
}

enum PriorityType {
    TICKET
}

enum RatingSubjectType {
    REPAIR
    TICKET
}

enum RepairOfferItemType {
    "Diagnosis part, inserted in automated way if present"
    DIAGNOSIS
    "This is a part od offer"
    OFFER
}

enum RepairState {
    CANCELED
    CLOSED
    CONFIRMED
    DIAGNOSIS
    IN_PROGRESS
    NOT_ACCEPTED
    NOT_PROCESSABLE
    PASSED_FOR_RETURN
    REQ_CUSTOMER_ACCEPT
    REQ_SUMMARY
    SCRAPPED
    UNDER_TESTING
    UNSAVED
    WAITING_FOR_COLLECTION
    WAITING_FOR_DELIVERY
    WAITING_FOR_DIAGNOSIS
    WAITING_FOR_PARTS
}

enum RepairTransportType {
    "Repair will be delivered or returned-back by service employee"
    INTERNAL
    "Repair will be delivered or returned-back via parcel"
    PARCEL
    "Customer will deliver or pick-up repair by himself"
    PERSONAL
}

enum RepairsFilterType {
    "All repairs"
    ALL
    CUSTOMER
    DEVICE
    "Only expired repairs"
    EXPIRED
    "Repair with particular ID, ID argument required"
    ID
    "Only open repairs"
    OPEN
    "Search for repairs using keywords, argument q is required"
    SEARCH
    "Repairs in given status, status argument required"
    STATUS
}

enum RepairsSort {
    CUSTOMER
    "Creation date"
    DATE_CREATED
    DATE_STARTED
    DATE_STARTED_REV
    DATE_UPDATED
    DAYS_REMAINING
    RMA
    STATUS
}

enum ScheduleConcern {
    CUSTOMER
    DEVICE
}

enum SecretTokenSubject {
    LICENCE
    ONLINEPAYMENT
    PARCEL
    REPAIR
}

enum ServiceSupplierType {
    BRANCH
    EXCHANGE_SOURCE
    EXCHANGE_TARGET
    MAIN
    SERVICE_SUPPLIER
}

enum TaxPrefix {
    AT
    BE
    BG
    CY
    CZ
    DE
    DK
    EE
    EL
    ES
    FI
    FR
    GB
    HR
    HU
    IE
    IT
    LT
    LU
    LV
    MT
    NL
    PL
    PT
    RO
    SE
    SI
    SK
}

enum TicketPaymentType {
    CONTRACT
    INSTANT_FIXED
    INSTANT_TIME
    SUBSCRIPTION_FIXED
    SUBSCRIPTION_TIME
}

enum TicketState {
    ASSIGNED
    CANCELED
    IN_PROGRESS
    NEW
    ON_THE_WAY
    RESOLVED
    UNSAVED
}

enum TicketsFilterType {
    ALL
    DEVICE
    ID
    OPEN
    SCHEDULED_ON
    SEARCH
    STATUS
}

enum TicketsSort {
    CREATED_AT
    ID
    STATUS
}

"An ISO 8601-encoded date, eg. 2000-01-01, YYYY-MM-DD"
scalar Date

"An ISO 8601-encoded datetime"
scalar DateTime

"Represents decimal."
scalar Decimal

"A reference to other, related entity or primary key of updated entity. 8 or more chars, uniq in scope of particular entity."
scalar HashID

input AddressInput {
    building: String
    city: String
    countryIso: CountryCode
    postalCode: String
    street: String
    type: AddressType
}

input AddressUpdateInput {
    ID: HashID
    building: String
    city: String
    countryIso: CountryCode
    postalCode: String
    street: String
    type: AddressType
}

input CustomFieldValueInput {
    "Field's primary key taken from customFields query"
    customField: HashID
    "Field's value relevant to definition - string, `1`/`0` for boolean or one of value from set (select)"
    value: String!
}

input CustomFieldValueUpdateInput {
    ID: HashID
    customField: HashID
    value: String!
}

input CustomerAgreementUpdateInput {
    ID: HashID
    accepted: Boolean!
    customerAgreement: HashID
}

input CustomerUpdateInput {
    companyName: String
    customFields: [CustomFieldValueUpdateInput!]
    email: String
    password: String
    person: String
    phone: PhoneInput
    taxId: String
    taxPrefix: TaxPrefix
    type: CustomerType
}

"Time window between two dates - time starts on 00:00:00 and ends on 23:59:59"
input DateRangeInput {
    from: Date!
    to: Date!
}

input DeviceInput {
    "Upload temporary file with document, then pass here `ID` of `TemporaryFile` entity."
    copyOfSaleDocumentTemporaryFile: HashID
    customFields: [CustomFieldValueInput!]
    model: String
    serial: String
    "`ID` passed from one of `REPAIR_SUBJECT_TYPE` `Dictionary` entity. Please note - device has no special type - it shares types with repairs."
    type: HashID!
    vendor: String
}

input DevicesFilter {
    ID: HashID
    type: DevicesFilterType!
}

input DictionaryEntriesFilter {
    auxiliaryId: String
    type: DictionaryType
}

input FileInput {
    "File MIME type, eg. image/png - must be valid IANA media type, list: http://www.iana.org/assignments/media-types/media-types.xhtml"
    contentType: String!
    "File name, only for display purposes"
    name: String!
    "File content encoded with base64. Please note: generic request size limit is always applied - whole mutation must be below 100MB"
    payload: String!
}

input MessageInput {
    content: String
    subject: String
}

input MessagesFilter {
    ID: HashID
    type: MessagesFilterType!
}

input PhoneInput {
    countryPrefix: String!
    number: String!
}

input PrioritiesFilter {
    type: PriorityType
}

input RatingInput {
    comment: String
    stars: Int!
}

input RepairCreationOptions {
    skipFloodValidation: Boolean = false
}

input RepairInput {
    "How repair will be returned from service to customer"
    collection: RepairTransportType
    customFields: [CustomFieldValueInput!]
    "How repair will be delivered to service"
    delivery: RepairTransportType
    issue: String
    model: String
    "ID passed from one Address entity points to address where from repair will be picked up"
    pickUpAddress: HashID
    "ID passed from one Address entity points to address where repair will be returned"
    returnAddress: HashID
    serial: String
    "ID passed from one of REPAIR_SUBJECT_TYPE Dictionary entity"
    type: HashID!
    vendor: String
    warranty: Boolean
    warrantyPurchaseDate: Date
    warrantyPurchaseDocument: String
}

input RepairItemInput {
    description: String
    serial: String
    type: HashID!
}

input RepairsFilter {
    ID: HashID
    q: String
    status: RepairState
    type: RepairsFilterType!
}

input ScheduleDatesFilter {
    dateRange: DateRangeInput!
}

input TicketCreationOptions {
    skipFloodValidation: Boolean = false
}

input TicketInput {
    address: HashID
    addressOther: String
    customFields: [CustomFieldValueInput!]
    issue: String
    priority: HashID
    startAt: DateTime
    wantInvoice: Boolean
}

input TicketsFilter {
    ID: HashID
    dateRange: DateRangeInput
    q: String
    status: TicketState
    type: TicketsFilterType!
}
