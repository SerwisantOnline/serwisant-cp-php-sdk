# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: CustomerQuery
    mutation: CustomerMutation
}

type Address {
    ID: HashID!
    building: String!
    city: String!
    countryIso: String!
    postalCode: String!
    street: String!
    type: AddressType!
}

type CustomField {
    ID: HashID!
    concern: Dictionary
    description: String
    name: String!
    required: Boolean!
    selectOptions: [String!]
    type: CustomFieldType!
}

type CustomFieldValue {
    field: CustomField!
    value: String
}

type Customer {
    address: Address
    addresses: [Address!]!
    avatar: File
    companyName: String
    "Will return a list of values for custom fields"
    customFields: [CustomFieldValue!]!
    displayName: String
    email: String
    internetAccess: Boolean!
    isAnonymous: Boolean!
    person: String
    phone: Phone
    "Service supplier who is default for that customer"
    serviceSupplier: ServiceSupplier!
    taxId: String
    taxPrefix: TaxPrefix
    "Time zone of customer, all times wisible for customer should be represented in this time zone"
    timeZone: String!
    type: CustomerType!
}

type CustomerAgreement {
    ID: HashID!
    content: String
    description: String!
    "Agreement is required to create Customer, but only if corresponding do CustomerType visibility flag is enabled"
    required: Boolean!
    title: String!
    type: CustomerAgreementType!
    visibleBusiness: Boolean!
    visiblePersonal: Boolean!
}

type CustomerCreationResult {
    customer: Customer
    errors: [Error!]
}

type CustomerMutation {
    createCustomer(addresses: [AddressInput!], agreements: [CustomerAgreementInput!], customer: CustomerInput!): CustomerCreationResult
}

type CustomerQuery {
    customerAgreements(filter: CustomerAgreementsFilter): [CustomerAgreement!]!
    "Will return a list of custom fields for customer signup form - for generic list see customFields"
    customerCustomFields: [CustomField!]!
    "Return information about currently logged in customer"
    viewer: Viewer!
}

type Dictionary {
    ID: HashID!
    name: String!
    type: DictionaryType!
}

"Error from mutation"
type Error {
    argument: String!
    code: String!
    message: String!
}

type File {
    contentType: String!
    image: Boolean!
    url(size: ImageSize = ORIGINAL): String
}

type Phone {
    "Country prefix, eg. +48"
    countryPrefix: String
    formatted: String
    isGsm: Boolean!
    "Number without country prefix - domestic number"
    number: String
}

type ServiceSupplier {
    address: Address
    addresses: [Address!]!
    avatar: File
    displayName: String!
    email: String
    phone: Phone
}

type Viewer {
    customer: Customer!
}

enum AddressType {
    BILLING
    BUSINESS
    HOME
    OTHER
}

enum CountryCode {
    PL
}

enum CustomFieldType {
    "Option"
    CHECKBOX
    "Date picker"
    DATE
    "Password (will be encrypted)"
    PASSWORD
    "Single choice list"
    SELECT
    "Single line text"
    TEXT
    "Multi line text"
    TEXTAREA
}

enum CustomerAgreementType {
    CUSTOM_1
    CUSTOM_2
    CUSTOM_3
    CUSTOM_4
    DATA_PROCESSING
    MARKETING_DATA_PROCESSING
    REFUND_POLICY
    RULES
}

enum CustomerType {
    "Company"
    BUSINESS
    "Person"
    PERSONAL
}

enum DictionaryType {
    "Type of component from inventory"
    COMPONENT_TYPE
    "Group od customers"
    CUSTOMER_GROUP
    "Repaired equipment types"
    REPAIR_SUBJECT_TYPE
    "Category of ticket"
    TICKET_CATEGORY
}

enum ImageSize {
    ORIGINAL
    THUMBNAIL
}

enum TaxPrefix {
    AT
    BE
    BG
    CY
    CZ
    DE
    DK
    EE
    EL
    ES
    FI
    FR
    GB
    HR
    HU
    IE
    IT
    LT
    LU
    LV
    MT
    NL
    PL
    PT
    RO
    SE
    SI
    SK
}

input AddressInput {
    building: String!
    city: String!
    countryIso: CountryCode!
    postalCode: String!
    street: String!
    type: AddressType!
}

input CustomFieldValueInput {
    ID: HashID!
    value: String!
}

input CustomerAgreementInput {
    ID: HashID!
    accepted: Boolean!
}

input CustomerAgreementsFilter {
    ID: HashID
    types: [CustomerAgreementType!]
}

input CustomerInput {
    companyName: String
    customFields: [CustomFieldValueInput!]
    email: String
    login: String
    password: String
    person: String
    phone: PhoneInput
    taxId: String
    taxPrefix: TaxPrefix
    type: CustomerType!
}

input PhoneInput {
    countryPrefix: String!
    number: String!
}


scalar HashID